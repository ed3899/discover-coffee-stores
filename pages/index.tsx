//% libs
// native
import type {NextPage} from "next";
import Head from "next/head";
import {useEffect, useState, useContext} from "react";

// external
import {v4 as uuidv4} from "uuid";

// local
import {fetchCoffeeStores} from "../lib/coffee-stores";
import useTrackLocation from "../hooks/use-track-location";

// types
import {InferGetStaticPropsType} from "next";
import {CoffeeStoreT} from "../lib/coffee-stores";

//% components
// native
import Image from "next/image";

// local
import Banner from "../components/banner";
import Card from "../components/card";

// context
import {ACTION_TYPES, StoreContext} from "../store/store-context";

//% styles
import styles from "../styles/Home.module.css";

//% data

export const getStaticProps = async () => {
  const data = await fetchCoffeeStores();

  return {
    props: {
      coffeeStores: data,
    },
  };
};

const Home: NextPage<
  InferGetStaticPropsType<typeof getStaticProps>
> = props => {
  const {locationErrorMsg, isFindingLocation, handleTrackLocation} =
    useTrackLocation();

  const [coffeeStoresNearUserError, setCoffeeStoresNearUserError] = useState({
    isError: false,
    errorMsg: "",
  });

  const {dispatch, state} = useContext(StoreContext);

  const {coffeeStores, latLong} = state;

  useEffect(() => {
    const setCoffeeStoresByLocation = async () => {
      if (latLong) {
        try {
          const fetchData = async () => {
            const res = await fetch(
              `/api/getCoffeeStoresByLocation?latLong=${latLong}&limit=30`
            );

            const coffeeStores = (await res.json()) as (CoffeeStoreT & {
              imgUrl: string;
            })[];

            // console.log({coffeeStores});

            dispatch({
              type: ACTION_TYPES.SET_COFFEE_STORES,
              payload: {
                coffeeStores,
              },
            });

            setCoffeeStoresNearUserError({isError: false, errorMsg: ""});
          };

          fetchData();
        } catch (error) {
          setCoffeeStoresNearUserError({
            isError: true,
            errorMsg: (error as Error).message,
          });
          throw new Error(`at useEffect ${error}`);
        }
      }
    };

    setCoffeeStoresByLocation();
  }, [latLong, dispatch]);

  const handleOnBannerBtnClick = () => {
    handleTrackLocation();
  };

  return (
    <div className={styles.container}>
      <Head>
        <title>Coffee Connoisseur</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
        <Banner
          buttonText={isFindingLocation ? "Locating..." : "View stores nearby"}
          handleOnClick={handleOnBannerBtnClick}
        />

        {/* Error message - Location */}
        {locationErrorMsg && (
          <span>Something went wrong: {locationErrorMsg}</span>
        )}

        {/* Error message - setCoffeeStoresNearUserError */}
        {coffeeStoresNearUserError.isError && (
          <span>
            Something went wrong: {coffeeStoresNearUserError.errorMsg}
          </span>
        )}

        {/* Hero image */}
        <div className={styles.heroImage}>
          <Image src="/static/hero-image.png" width={700} height={400} />
        </div>

        {/* User location based stores */}
        {coffeeStores.length > 0 && (
          <div className={styles.sectionWrapper}>
            <h2 className={styles.heading2}>Stores near me</h2>
            <div className={styles.cardLayout}>
              {(coffeeStores as (CoffeeStoreT & {imgUrl: string})[]).map(
                coffeeStore => {
                  return (
                    <Card
                      name={coffeeStore.name}
                      imgUrl={
                        coffeeStore.imgUrl ??
                        "https://images.unsplash.com/photo-1504753793650-d4a2b783c15e?ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&ixlib=rb-1.2.1&auto=format&fit=crop&w=2000&q=80"
                      }
                      href={`/coffee-store/${coffeeStore.fsq_id}`}
                      className={styles.card}
                      key={uuidv4()}
                    />
                  );
                }
              )}
            </div>
          </div>
        )}

        {/* Toronto stores */}
        {props.coffeeStores.length > 0 && (
          <div className={styles.sectionWrapper}>
            <h2 className={styles.heading2}>Toronto stores</h2>
            <div className={styles.cardLayout}>
              {props.coffeeStores.map(coffeeStore => {
                return (
                  <Card
                    name={coffeeStore.name}
                    imgUrl={
                      coffeeStore.imgUrl ??
                      "https://images.unsplash.com/photo-1504753793650-d4a2b783c15e?ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&ixlib=rb-1.2.1&auto=format&fit=crop&w=2000&q=80"
                    }
                    href={`/coffee-store/${coffeeStore.fsq_id}`}
                    className={styles.card}
                    key={uuidv4()}
                  />
                );
              })}
            </div>
          </div>
        )}
      </main>
    </div>
  );
};

export default Home;
